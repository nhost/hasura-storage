// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nhost/hasura-storage/controller (interfaces: Antivirus)

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/nhost/hasura-storage/controller"
)

// MockAntivirus is a mock of Antivirus interface.
type MockAntivirus struct {
	ctrl     *gomock.Controller
	recorder *MockAntivirusMockRecorder
}

// MockAntivirusMockRecorder is the mock recorder for MockAntivirus.
type MockAntivirusMockRecorder struct {
	mock *MockAntivirus
}

// NewMockAntivirus creates a new mock instance.
func NewMockAntivirus(ctrl *gomock.Controller) *MockAntivirus {
	mock := &MockAntivirus{ctrl: ctrl}
	mock.recorder = &MockAntivirusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAntivirus) EXPECT() *MockAntivirusMockRecorder {
	return m.recorder
}

// ScanReader mocks base method.
func (m *MockAntivirus) ScanReader(arg0 io.ReaderAt) *controller.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanReader", arg0)
	ret0, _ := ret[0].(*controller.APIError)
	return ret0
}

// ScanReader indicates an expected call of ScanReader.
func (mr *MockAntivirusMockRecorder) ScanReader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanReader", reflect.TypeOf((*MockAntivirus)(nil).ScanReader), arg0)
}
